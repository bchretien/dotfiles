" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{{,}}} foldlevel=0 foldmethod=marker spell: ft=vim

let g:nvim_dir = get(g:, "nvim_dir", expand("~/.config/nvim/"))
let g:plugin_dir = get(g:, "plugin_dir", g:nvim_dir . "plugged/")

" Start adding Plugs
silent! if plug#begin(g:plugin_dir)

" Edition plugins {{{
  " Auto-close feature for parentheses, brackets etc.
  Plug 'jiangmiao/auto-pairs'

  " Extended f, F, t and T key mappings for Vim
  Plug 'rhysd/clever-f.vim'

  " Speed up Vim by updating folds only when called-for
  Plug 'Konfekt/FastFold'

  " Provide a completion function for Unicode glyphs
  Plug 'chrisbra/unicode.vim', {
        \ 'do': 'wget -nc http://www.unicode.org/Public/UNIDATA/UnicodeData.txt -O /tmp/UnicodeData.txt && ' .
              \ 'sha256sum -c <(printf \"38b17e1118206489a7e0ab5d29d7932212d38838df7d3ec025ecb58e8798ec20  /tmp/UnicodeData.txt\n\") && ' .
              \ 'mkdir -p ' . g:plugin_dir . 'unicode.vim/autoload/unicode && ' .
              \ 'cp /tmp/UnicodeData.txt ' . g:plugin_dir . 'unicode.vim/autoload/unicode',
        \ 'on': 'Digraphs' }

  " A Vim alignment plugin
  Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }

  " Vim Liquid runtime files with Jekyll enhancements
  Plug 'tpope/vim-liquid', { 'for': ['liquid'] }

  " True Sublime Text style multiple selections for Vim
  Plug 'terryma/vim-multiple-cursors'

  " A Vim plugin for looking up words in an online thesaurus
  Plug 'beloglazov/vim-online-thesaurus', { 'for': ['tex', 'text'] }

  " Quoting/parenthesizing made simple
  Plug 'tpope/vim-surround'

  " Minimalist, versatile Vim motion plugin
  Plug 'justinmk/vim-sneak'

  " Vim plugin that provides additional text objects
  Plug 'wellle/targets.vim'

  " Adds text-objects for word-based columns in Vim.
  Plug 'coderifous/textobj-word-column.vim'
" }}}

" Development plugins {{{
  " DoxygenToolkit: Doxygen support
  Plug 'vim-scripts/DoxygenToolkit.vim', { 'for': ['c', 'cpp', 'python'] }

  " Gist wrapper
  Plug 'mattn/webapi-vim', { 'on': 'Gist' } | Plug 'mattn/gist-vim', { 'on': 'Gist' }

  " gitk for Vim
  Plug 'junegunn/gv.vim', { 'on': 'GV' }

  " Debugger integration with a focus on ease-of-use
  Plug 'critiqjo/lldb.nvim', { 'for': ['c', 'cpp'], 'on': ['LLsession'] }

  " Commenter plugin
  Plug 'tomtom/tcomment_vim'

  " Display tags in a window, ordered by scope
  Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }

  " UltiSnips: engine.
  Plug 'sirver/ultisnips', { 'on': [] } | Plug 'honza/vim-snippets'

  " Provide easy code formatting in Vim by integrating existing code formatters
  Plug 'Chiel92/vim-autoformat'

  " Vim plug for switching between companion source files (e.g. ".h" and ".cpp")
  Plug 'derekwyatt/vim-fswitch', { 'for': ['c', 'cpp', 'objc'], 'on': ['FSwitch'] }

  " Git wrapper
  Plug 'tpope/vim-fugitive'

  " Perform the replacement in quickfix
  Plug 'thinca/vim-qfreplace', { 'on': 'Qfreplace' }

  " Enhanced syntax highlighting for C++
  Plug 'octol/vim-cpp-enhanced-highlight'

  " Autocompletion
  Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh',
      \ }
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

  " Asynchronous linting/fixing for Vim and LSP integration
  Plug 'w0rp/ale'

  " Lazy load UltiSnips
  function! LazyLoadInsert ()
    call plug#load('ultisnips')
    echo 'UltiSnips enabled'
  endfunction

  augroup load_us_ycm
    autocmd!
    autocmd FileType snippets call LazyLoadInsert() | autocmd! load_us_ycm
    autocmd InsertEnter * call LazyLoadInsert() | autocmd! load_us_ycm
  augroup END
" }}}

" Miscellaneous plugins {{{
  " fzf for vim
  if executable('fzf')
    Plug 'junegunn/fzf' | Plug 'junegunn/fzf.vim'
  endif

  " LaTeX support
  if executable('latexmk')
    Plug 'lervag/vimtex'
  endif

  " File type plugin for folding TeX files
  Plug 'matze/vim-tex-fold', { 'for': ['tex'] }

  " Perform all your Vim insert mode completions with Tab
  Plug 'ervandew/supertab'

  " Vim Markdown runtime files
  Plug 'tpope/vim-markdown'

  " Change Vim working directory to the project root
  Plug 'airblade/vim-rooter'
" }}}

" Display plugins {{{
  " A light and configurable statusline/tabline for Vim
  Plug 'bchretien/lightline.vim'

  " Show a VCS diff using Vim's sign column
  Plug 'mhinz/vim-signify'

  " Fancy start screen
  Plug 'mhinz/vim-startify'

  " Color schemes
  Plug 'bchretien/vim-hybrid'
" }}}

" Load local plugin file (if it exists)
" This provides a way to have user-specific plugins without needing
" to change this file.
if filereadable(expand("~/.config/nvim/plugins.local.vim"))
  source ~/.config/nvim/plugins.local.vim
endif

" Stop adding Plugs
call plug#end()
endif
