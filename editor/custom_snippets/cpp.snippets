# namespace
snippet ns "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} // end of `!p
if not t[1]:
  snip.rv = "unnamed namespace"
else:
  snip.rv = "namespace %s" % t[1]
`
endsnippet

# #include <...>
snippet inc
#include <${1:iostream}>
endsnippet

# #include "..."
snippet Inc
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
# define ${1:SYMBOL} ${2:value}
#endif //! ${1/([A-Za-z0-9_]+).*/$1/}
endsnippet

# include guard
snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import string, subprocess
	is_git_repo = subprocess.call(['git', 'rev-parse', '--is-inside-work-tree'], stderr=subprocess.PIPE) == 0
	if is_git_repo:
		git_root_path = subprocess.check_output(['git', 'rev-parse', '--show-toplevel'])[:-1]
		if path:
			rel_path = os.path.relpath(path or "", git_root_path)
			rel_path = re.sub(r'include/', '', '%s' % rel_path)
		else:
			rel_path = "name"
	else:
		rel_path = fn or "name"
	path_name = re.sub(r'[^A-Za-z0-9]+', '_', '%s' % rel_path).upper()
	snip.rv = ('%s' % (path_name)).upper()
else:
	snip.rv = snip.c`}
# define $1

${VISUAL}${0}

#endif //! $1
endsnippet

# structure
snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name")`}
{
	${0:/* data */}
};
endsnippet

# template
snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
$0
endsnippet

# Boost shared_ptr
snippet sha "boost::shared_ptr<T>" w
boost::shared_ptr<${1:${VISUAL/([.^\n]+)/(?1::T)/}}>$0
endsnippet

# std::vector
snippet vec "std::vector<T>" w
std::vector<${1:${VISUAL/([.^\n]+)/(?1::T)/}}>$0
endsnippet

# Static cast
snippet sta "static_cast<T> (..)" w
static_cast<${1:int}> (${2:${VISUAL}})$0
endsnippet

# Assert
snippet ass "assert (..)" w
assert (${1:${VISUAL}})$0
endsnippet

# For loops
snippet for "for loop (for)"
for (${1:int} ${2:i} = 0; $2 < ${3:count}; ${4:++$2})
{
	${VISUAL}${0}
}
endsnippet

# For loops (size_t)
snippet fors "for loop (size_t)"
for (size_t ${1:i} = 0; $1 < ${2:count}; ${3:++$1})
{
	${VISUAL}${0}
}
endsnippet

# std::cout
snippet cout "std::cout << ... << std::endl" w
std::cout << ${VISUAL}${0} << std::endl;
endsnippet

# std::cerr
snippet cerr "std::cerr << ... << std::endl" w
std::cerr << ${VISUAL}${0} << std::endl;
endsnippet
