" vim: set foldmethod=marker foldlevel=0 et ts=2 sw=2 sts=2:
" ============================================================================
" .nvimrc of bchretien
" ============================================================================

" Environment {{{
  " Identify platform 
  silent function! OSX()
    return has('macunix')
  endfunction
  silent function! LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
  endfunction
  silent function! WINDOWS()
    return (has('win16') || has('win32') || has('win64'))
  endfunction
" }}}

" Use plugins config {{{
  if filereadable(expand("~/.nvimrc.plugins"))
    source ~/.nvimrc.plugins
  endif
" }}}

" ============================================================================
" General {{{
" ============================================================================

" Assume a dark background
set background=dark
" Automatically detect file types.
filetype plugin indent on
" Syntax highlighting
syntax on
" Automatically enable mouse usage
set mouse=a
" Hide the mouse cursor while typing
set mousehide
" Default to UTF-8
scriptencoding utf-8
" Enable modelines
set modeline

" TODO: still relevant?
" Fix mouse in vim under tmux
if &term =~ '^screen'
  " tmux knows the extended mouse mode
  set ttymouse=xterm2
endif

" System clipboard support
if has('clipboard')
  if has('unnamedplus') " When possible use + register for copy-paste
    set clipboard=unnamed,unnamedplus
  else " On mac and Windows, use * register for copy-paste
    set clipboard=unnamed
  endif
endif

" Abbrev. of messages (avoids 'hit enter')
set shortmess+=filmnrxoOtT
" Better Unix / Windows compatibility
set viewoptions=folds,options,cursor,unix,slash
" Allow virtual editing in Visual block mode
set virtualedit=block
" Store a ton of history (default is 20)
set history=1000
" Spell checking off
set nospell
" Allow buffer switching without saving
set hidden

" Splitting style
set splitbelow
set splitright

" Keep the window height when windows are opened or closed
set winfixheight

" Indent
set autoindent
filetype plugin indent on

" Optimization
set viminfo=<0,'0,/150,:100,h,f0,s0

" Default number of spaces for indent, tab behavior, etc.
set shiftwidth=2
set expandtab
set tabstop=2

" Swap, backup, undo {{{
  " Disable swap files
  set noswapfile
  " Disable backups
  set nobackup
  if has('persistent_undo')
    " Maximum number of changes that can be undone
    set undolevels=1000
    " Maximum number lines to save for undo on a buffer reload
    set undoreload=10000
    " Undo directory
    set undodir=~/.nvim/tmp/undo/
    " Undo file
    set undofile

    " Make those folders automatically if they don't already exist.
    if !isdirectory(expand(&undodir))
        call mkdir(expand(&undodir), "p")
    endif
  endif
" }}}

" }}}
" ============================================================================
" User Interface {{{
" ============================================================================

" Colors {{{
  " Enable 256 colors
  if $TERM == "xterm-256color"
    set t_Co=256
  endif

  " Change cursor color
  if &term =~ "xterm\\|rxvt\\|screen"
    " cursor color in insert mode
    let &t_SI = "\<Esc>]12;#118A3D\x7"
    " else
    let &t_EI = "\<Esc>]12;#115E8B\x7"
    silent !echo -ne "\033]12;blue\007"
    " reset cursor when vim exits
    autocmd VimLeave * silent !echo -ne "\033]112\007"
    " use \003]12;gray\007 for gnome-terminal
  endif

  " Colorscheme
  colorscheme hybrid

  " Fix cursor in search for hybrid
  hi Cursor ctermfg=16 ctermbg=253

  " Fix spellchecking color
  hi clear SpellBad
  hi SpellBad cterm=underline ctermfg=red

  highlight clear SignColumn " SignColumn should match background
  highlight clear LineNr " Current line number row will have same background color in relative mode
  "highlight clear CursorLineNr " Remove highlight color from current line number

  au BufRead,BufWinEnter * if &diff || (v:progname =~ "diff") | set nocursorline | endif
" }}}

" Only show 15 tabs
set tabpagemax=15
" Display the current mode
set showmode
" Highlight current line
set cursorline

if has('cmdline_info')
  " Show the ruler
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
  set showcmd " Show partial commands in status line and
              " Selected characters/lines in visual mode
endif

set backspace=indent,eol,start " Backspace for dummies
set linespace=0 " No extra spaces between rows
" Line numbers on
set number
" Relative line numbers on
set relativenumber
" Show matching brackets/parenthesis
set showmatch
" Find as you type search
set incsearch
" Highlight search terms
set hlsearch
set winminheight=0 " Windows can be 0 line high
" Case insensitive search
set ignorecase
" Case sensitive when uc present
set smartcase
" Show list instead of just completing
set wildmenu
" Command <Tab> completion, list matches, then longest common part, then all
set wildmode=list:longest,full
" Backspace and cursor keys wrap too
set whichwrap=b,s,h,l,<,>,[,]
" Lines to scroll when cursor leaves screen
set scrolljump=5
" Minimum lines to keep above and below cursor
set scrolloff=3

" Highlight problematic whitespace
set list
set listchars=tab:>-,trail:~,extends:>,precedes:<

" Completion
set completeopt+=menuone
set completeopt-=preview

" Default Vim completion should not look for all include files (slow)
set complete-=i
" Default Vim completion should not look for all tags (slow)
set complete-=t

set linebreak
set wrap

" Disable colorcolumn (use vim-lengthmatters instead)
set colorcolumn=

" Folding
set foldmethod=indent
set foldenable
set foldlevel=100

" Optimization
set lazyredraw

" Syntax coloring lines that are too long really slows Vim down
set synmaxcol=200

" FIXME: useful?
set switchbuf=usetab

" }}}
" ============================================================================
" Autocmd {{{
" ============================================================================

" Fix autoindent in yaml
autocmd FileType yaml setl indentkeys-=<:>

" K to lookup current word in cppman
command! -nargs=+ Cppman silent! call system("tmux split-window cppman " . expand(<q-args>))
"autocmd FileType cpp set keywordprg="tmux split-window cppman"
autocmd FileType cpp nnoremap <silent><buffer> K <Esc>:Cppman <cword><CR>

" If doing a diff. Upon writing changes to file, automatically update the
" differences
autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" From Junegunn Choi's dotfiles
function! s:helptab()
  if &buftype == 'help'
    "wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction

augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt call s:helptab()
augroup END

" Don't show tabs/trailing whitespaces in man pages
autocmd FileType man set nolist

" Use :help with K
autocmd FileType vim set keywordprg=:bel\ help\ \|\ bot\ resize\ 20

" }}}
" ============================================================================
" Mappings {{{

" Navigation
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

" Navigation for tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabprev<CR>
nnoremap tk  :tabnext<CR>
nnoremap tl  :tablast<CR>
nnoremap tm  :tabm<Space>
nnoremap tn  :tabnew<CR>
nnoremap td  :tabclose<CR>
nnoremap tt  :tabnext<CR>

"This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" }}}
" ============================================================================
" Plugins {{{
" ============================================================================
  " fzf.vim {{{
  if isdirectory(expand("~/.nvim/plugged/fzf.vim"))
    " Disable statusline overwriting
    let g:fzf_nvim_statusline = 0

    let g:fzf_action = {
          \ 'ctrl-s': 'split',
          \ 'ctrl-v': 'vsplit'
          \ }

    fun! s:fzf_root()
      let path = finddir(".git", expand("%:p:h").";")
      return expand(fnamemodify(substitute(path, ".git", "", ""), ":p:h"))
    endfun

    " Ctrl-P without fuzzy search
    nnoremap <c-p> :FZF -e<cr>

    " Ctrl-Space to see buffers
    " Note: <c-space> seen as <c-@> by neovim.
    " See: https://github.com/neovim/neovim/issues/2782
    nnoremap <c-@> :Buffers<cr>
  endif
  " }}}
  " lightline.vim {{{
    if isdirectory(expand("~/.nvim/plugged/lightline.vim"))
      function! LightlineMode()
        let fname = expand('%:t')
        return fname == '__Tagbar__' ? 'Tagbar' :
              \ fname == 'ControlP' ? 'CtrlP':
              \ fname == '__Gundo__' ? 'Gundo' :
              \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
              \ fname =~ 'NERD_tree' ? 'NERDTree' :
              \ &ft == 'unite' ? 'Unite' :
              \ &ft == 'vimfiler' ? 'VimFiler' :
              \ &ft == 'vimshell' ? 'VimShell' :
              \ winwidth('.') > 60 ? lightline#mode() : ''
      endfunction

      let g:lightline = {
            \ 'colorscheme': 'murmur',
            \ 'enable': {
            \   'tabline': 1,
            \   'statusline': 1,
            \ },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['tagbar'] ],
            \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'component': {
            \   'readonly': '%{&filetype=="help"?"":&readonly?"":""}',
            \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
            \   'fugitive': '%{exists("*fugitive#head")? " ".fugitive#head():""}',
            \   'tagbar': '%{tagbar#currenttag("[%s]", "", "f")}'
            \ },
            \ 'component_visible_condition': {
            \   'readonly': '(&filetype!="help"&& &readonly)',
            \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
            \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
            \ },
            \ 'component_function': {
            \   'mode': 'LightlineMode',
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }

      let g:lightline.tabline = {
            \ 'left': [ [ 'tabs' ] ],
            \ 'right': [ [ 'close' ] ] }

      "let g:lightline.component_type = {
            "\ 'tabs': 'raw' }
    endif
  " }}}
  " supertab {{{
    if isdirectory(expand("~/.nvim/plugged/supertab"))
      let g:SuperTabDefaultCompletionType = '<Tab>'
      let g:SuperTabBackward = '<C-S-Tab>'
    endif
  " }}}
  " ultisnips {{{
    if isdirectory(expand("~/.nvim/plugged/ultisnips"))
      " Trigger configuration.
      let g:UltiSnipsExpandTrigger="<tab>"
      let g:UltiSnipsJumpForwardTrigger="<tab>"
      let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
      let g:UltiSnipsListSnippets="<c-tab>"

      " If you want :UltiSnipsEdit to split your window.
      let g:UltiSnipsEditSplit="vertical"

      " Custom snippets
      let g:UltiSnipsSnippetsDir = "~/.nvim/custom_snippets"
      let g:UltiSnipsSnippetDirectories=["UltiSnips", "custom_snippets"]

      " Prevent UltiSnips from stealing ctrl-k.
      augroup VimStartup
        autocmd!
        autocmd VimEnter * sil! iunmap <c-k>
      augroup end
    endif
  " }}}
  " YouCompleteMe {{{
    if isdirectory(expand("~/.nvim/plugged/YouCompleteMe"))
      let g:ycm_key_list_select_completion = ['<Down>']
    endif
  " }}}
" }}}
" ============================================================================
