" vim: set foldmethod=marker foldlevel=0 et:
" ============================================================================
" .nvimrc of bchretien
" ============================================================================

" Environment {{{
  " Identify platform 
  silent function! OSX()
    return has('macunix')
  endfunction
  silent function! LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
  endfunction
  silent function! WINDOWS()
    return (has('win16') || has('win32') || has('win64'))
  endfunction
" }}}

" Use plugins config {{{
  if filereadable(expand("~/.nvimrc.plugins"))
    source ~/.nvimrc.plugins
  endif
" }}}

" ============================================================================
" General {{{
" ============================================================================

" Assume a dark background
set background=dark
" Automatically detect file types.
filetype plugin indent on
" Syntax highlighting
syntax on
" Automatically enable mouse usage
set mouse=a
" Hide the mouse cursor while typing
set mousehide
" Default to UTF-8
scriptencoding utf-8
" Enable modelines
set modeline

" TODO: still relevant?
" Fix mouse in vim under tmux
if &term =~ '^screen'
  " tmux knows the extended mouse mode
  set ttymouse=xterm2
endif

" System clipboard support
if has('clipboard')
  if has('unnamedplus') " When possible use + register for copy-paste
    set clipboard=unnamed,unnamedplus
  else " On mac and Windows, use * register for copy-paste
    set clipboard=unnamed
  endif
endif

" Abbrev. of messages (avoids 'hit enter')
set shortmess+=filmnrxoOtT
" Better Unix / Windows compatibility
set viewoptions=folds,options,cursor,unix,slash
" Allow virtual editing in Visual block mode
set virtualedit=block
" Store a ton of history (default is 20)
set history=1000
" Spell checking off
set nospell
" Allow buffer switching without saving
set hidden

" Splitting style
set splitbelow
set splitright

" Keep the window height when windows are opened or closed
set winfixheight

" Indent
set autoindent
filetype plugin indent on

" }}}
" ============================================================================
" User Interface {{{
" ============================================================================
" Colors {{{
  " Enable 256 colors
  if $TERM == "xterm-256color"
    set t_Co=256
  endif

  " Change cursor color
  if &term =~ "xterm\\|rxvt\\|screen"
    " cursor color in insert mode
    let &t_SI = "\<Esc>]12;#118A3D\x7"
    " else
    let &t_EI = "\<Esc>]12;#115E8B\x7"
    silent !echo -ne "\033]12;blue\007"
    " reset cursor when vim exits
    autocmd VimLeave * silent !echo -ne "\033]112\007"
    " use \003]12;gray\007 for gnome-terminal
  endif

  " Colorscheme
  colorscheme hybrid

  " Fix cursor in search for hybrid
  hi Cursor ctermfg=16 ctermbg=253

  " Fix spellchecking color
  hi clear SpellBad
  hi SpellBad cterm=underline ctermfg=red

  highlight clear SignColumn " SignColumn should match background
  highlight clear LineNr " Current line number row will have same background color in relative mode
  "highlight clear CursorLineNr " Remove highlight color from current line number

  au BufRead,BufWinEnter * if &diff || (v:progname =~ "diff") | set nocursorline | endif
" }}}

" Only show 15 tabs
set tabpagemax=15
" Display the current mode
set showmode
" Highlight current line
set cursorline

if has('cmdline_info')
  " Show the ruler
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
  set showcmd " Show partial commands in status line and
              " Selected characters/lines in visual mode
endif

set backspace=indent,eol,start " Backspace for dummies
set linespace=0 " No extra spaces between rows
" Line numbers on
set number
" Relative line numbers on
set relativenumber
" Show matching brackets/parenthesis
set showmatch
" Find as you type search
set incsearch
" Highlight search terms
set hlsearch
set winminheight=0 " Windows can be 0 line high
" Case insensitive search
set ignorecase
" Case sensitive when uc present
set smartcase
" Show list instead of just completing
set wildmenu
" Command <Tab> completion, list matches, then longest common part, then all
set wildmode=list:longest,full
" Backspace and cursor keys wrap too
set whichwrap=b,s,h,l,<,>,[,]
" Lines to scroll when cursor leaves screen
set scrolljump=5
" Minimum lines to keep above and below cursor
set scrolloff=3

set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" Completion
set completeopt+=menuone
set completeopt-=preview

" Default Vim completion should not look for all include files (slow)
set complete-=i
" Default Vim completion should not look for all tags (slow)
set complete-=t

set linebreak
set wrap

" Disable colorcolumn (use vim-lengthmatters instead)
set colorcolumn=

" Folding
set foldmethod=indent
set foldenable
set foldlevel=100

" Optimization
set lazyredraw

" Syntax coloring lines that are too long really slows Vim down
set synmaxcol=200

" FIXME: useful?
set switchbuf=usetab

" }}}
" ============================================================================
" Autocmd {{{
" ============================================================================
" Fix autoindent in yaml
autocmd FileType yaml setl indentkeys-=<:>

" K to lookup current word in cppman
command! -nargs=+ Cppman silent! call system("tmux split-window cppman " . expand(<q-args>))
"autocmd FileType cpp set keywordprg="tmux split-window cppman"
autocmd FileType cpp nnoremap <silent><buffer> K <Esc>:Cppman <cword><CR>

" If doing a diff. Upon writing changes to file, automatically update the
" differences
autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Help in new tabs (from Junegunn Choi's dotfiles)
function! s:helptab()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction

augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt call s:helptab()
augroup END
" }}}
" ============================================================================
