" vim: set foldmethod=marker foldlevel=0 et ts=2 sw=2 sts=2:
" ============================================================================
" .nvimrc of bchretien
" ============================================================================

" Environment {{{
  " Identify platform
  silent function! OSX()
    return has('macunix')
  endfunction
  silent function! LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
  endfunction
  silent function! WINDOWS()
    return (has('win16') || has('win32') || has('win64'))
  endfunction

  " Paths
  let s:nvim_dir = expand("~/.config/nvim/")
  let s:plugin_dir = s:nvim_dir . "plugged/"
" }}}
" Use plugins config {{{
  let s:plugins_script = s:nvim_dir . 'plugins.vim'
  if filereadable(s:plugins_script)
    exec "source " . s:plugins_script
  endif
" }}}

" ============================================================================
" General {{{
" ============================================================================

" Assume a dark background
set background=dark
" Automatically detect file types.
filetype plugin indent on
" Syntax highlighting
syntax on
" Automatically enable mouse usage
set mouse=a
" Hide the mouse cursor while typing
set mousehide
" Default to UTF-8
scriptencoding utf-8
" Enable modelines
set modeline

" TODO: still relevant?
" Fix mouse in vim under tmux
if &term =~ '^screen'
  " tmux knows the extended mouse mode
  set ttymouse=xterm2
endif

" System clipboard support
set clipboard=unnamed,unnamedplus

" Abbrev. of messages (avoids 'hit enter')
set shortmess+=filmnrxoOtT
" Better Unix / Windows compatibility
set viewoptions=folds,options,cursor,unix,slash
" Allow virtual editing in Visual block mode
set virtualedit=block
" Store a ton of history (default is 20)
set history=1000
" Spell checking off
set nospell
" Allow buffer switching without saving
set hidden

" Splitting style
set splitbelow
set splitright

" Keep the window height when windows are opened or closed
set winfixheight

" Indent
set autoindent
filetype plugin indent on

" Optimization
set viminfo=<0,'10,/150,:100,h,f0,s10

" Default number of spaces for indent, tab behavior, etc.
set shiftwidth=2
set expandtab
set tabstop=2

" Add <> to matchpairs
set mps+=<:>

" Swap, backup, undo {{{
  " Disable swap files
  set noswapfile
  " Disable backups
  set nobackup
  if has('persistent_undo')
    " Maximum number of changes that can be undone
    set undolevels=1000
    " Maximum number lines to save for undo on a buffer reload
    set undoreload=10000
    " Undo directory
    set undodir=~/.local/share/nvim/tmp/undo/
    " Undo file
    set undofile

    " Make those folders automatically if they don't already exist.
    if !isdirectory(expand(&undodir))
        call mkdir(expand(&undodir), "p")
    endif
  endif
" }}}

" }}}
" ============================================================================
" User Interface {{{
" ============================================================================

" Colors {{{
  " TODO: change cursor color on insert

  " Colorscheme
  colorscheme hybrid

  " Fix cursor in search for hybrid
  hi Cursor ctermfg=16 ctermbg=253

  " Fix spellchecking color
  hi clear SpellBad
  hi SpellBad cterm=underline ctermfg=red

  highlight clear SignColumn " SignColumn should match background
  highlight clear LineNr " Current line number row will have same background color in relative mode
  "highlight clear CursorLineNr " Remove highlight color from current line number
" }}}

" Only show 15 tabs
set tabpagemax=15
" Do not show the current mode as (status bar available)
set noshowmode
" Highlight current line
set cursorline

if has('cmdline_info')
  " Show the ruler
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
  set showcmd " Show partial commands in status line and
              " Selected characters/lines in visual mode
endif

set backspace=indent,eol,start " Backspace for dummies
set linespace=0 " No extra spaces between rows
" Line numbers on
set number
" Relative line numbers on
set relativenumber
" Show matching brackets/parenthesis
set showmatch
" Find as you type search
set incsearch
" Highlight search terms
set hlsearch
set winminheight=0 " Windows can be 0 line high
" Case insensitive search
set ignorecase
" Case sensitive when uc present
set smartcase
" Show list instead of just completing
set wildmenu
" Command <Tab> completion, list matches, then longest common part, then all
set wildmode=list:longest,full
" Backspace and cursor keys wrap too
set whichwrap=b,s,h,l,<,>,[,]
" Lines to scroll when cursor leaves screen
set scrolljump=5
" Minimum lines to keep above and below cursor
set scrolloff=3

" Highlight problematic whitespace
set list
set listchars=tab:>-,trail:~,extends:>,precedes:<

" Completion
set completeopt+=menuone
set completeopt-=preview

" Default Vim completion should not look for all include files (slow)
set complete-=i
" Default Vim completion should not look for all tags (slow)
set complete-=t

set linebreak
set wrap

" Disable colorcolumn (use vim-lengthmatters instead)
set colorcolumn=

" Folding
set foldmethod=indent
set foldenable
set foldlevel=100

" Optimization
set lazyredraw

" Syntax coloring lines that are too long really slows Vim down
set synmaxcol=200

" FIXME: useful?
set switchbuf=usetab

" }}}
" ============================================================================
" Functions {{{
" ============================================================================
" See: http://stackoverflow.com/a/6171215/1043187
" Escape special characters in a string for exact matching.
" This is useful to copying strings from the file to the search tool
" Based on this - http://peterodding.com/code/vim/profile/autoload/xolox/escape.vim
function! EscapeString (string)
  let string=a:string
" Escape regex characters
  let string = escape(string, '^$.*\/~[]')
" Escape the line endings
  let string = substitute(string, '\n', '\\n', 'g')
  return string
endfunction

" Get the current visual block for search and replaces
" This function passed the visual block through a string escape function
" Based on this - http://stackoverflow.com/questions/676600/vim-replace-selected-text/677918#677918
function! GetVisual() range
  " Save the current register and clipboard
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&

  " Put the current visual selection in the " register
  normal! ""gvy
  let selection = getreg('"')

  " Put the saved registers and clipboards back
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save

  "Escape any special characters in the selection
  let escaped_selection = EscapeString(selection)

  return escaped_selection
endfunction

" See: http://stackoverflow.com/a/5538963/1043187
function! MyCloseDiff()
  if (&diff == 0 || getbufvar('#', '&diff') == 0)
        \ && (bufname('%') !~ '^fugitive:' && bufname('#') !~ '^fugitive:')
    echom "Not in diff view."
    return
  endif

  " close current buffer if alternate is not fugitive but current one is
  if bufname('#') !~ '^fugitive:' && bufname('%') =~ '^fugitive:'
    if bufwinnr("#") == -1
      b #
      bd #
    else
      bd
    endif
  else
    bd #
  endif
endfunction

" Zoom / Restore window.
function! s:ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endfunction
command! ZoomToggle call s:ZoomToggle()

function! s:EpsilonCleaning(val)
  normal mz
  exe '%s/\v([-]?[0-9]+[\.]?[0-9]*[e\+-]*[0-9]*)/\='
    \ . 'abs(str2float(submatch(0))) < str2float("'. a:val . '") ? "0" : submatch(0)/ge'
  normal `z
endfunction
command! -nargs=+ EpsilonCleaning call s:EpsilonCleaning(expand(<q-args>))

function! s:StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction
command! StripTrailingWhitespace call s:StripTrailingWhitespace()

" Write file, call emacs for indenting, then reload
" To use this:
" :call EmacsIndent()
function! s:EmacsIndent()
  let l:filename = expand("%:p")
  w
  echom system("emacs -batch " . l:filename . " --eval '(indent-region (point-min) (point-max) nil)' -f save-buffer -kill")
  edit!
  redraw
endfunction
command! EmacsIndent call s:EmacsIndent()

" See: http://stackoverflow.com/questions/290465/vim-how-to-paste-over-without-overwriting-register
function! RestoreRegister()
  if &clipboard =~ 'unnamed'
    let @* = s:restore_reg
  endif
  if &clipboard =~ 'unnamedplus'
    let @+ = s:restore_reg
  endif
  if &clipboard !~ 'unnamed' && &clipboard !~ 'unnamedplus'
    let @" = s:restore_reg
  endif
  return ''
endfunction

function! s:Repl()
  if &clipboard =~ 'unnamed'
    let s:restore_reg = @*
  elseif &clipboard =~ 'unnamedplus'
    let s:restore_reg = @+
  else
    let s:restore_reg = @"
  endif
  return "p@=RestoreRegister()\<cr>"
endfunction

function! s:ReplSelect()
    echo "Register to paste over selection? (<cr> => default register: ".strtrans(@").")"
    let c = nr2char(getchar())
    let reg = c =~ '^[0-9a-z:.%#/*+~]$'
                \ ? '"'.c
                \ : ''
    return "\<C-G>".reg
endfunction

" See: http://stackoverflow.com/a/7321131/1043187
function! DeleteInactiveBufs()
  " From tabpagebuflist() help, get a list of all buffers in all tabs
  let tablist = []
  for i in range(tabpagenr('$'))
    call extend(tablist, tabpagebuflist(i + 1))
  endfor

  " Below originally inspired by Hara Krishna Dara and Keith Roberts
  " http://tech.groups.yahoo.com/group/vim/message/56425
  let nWipeouts = 0
  for i in range(1, bufnr('$'))
    if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
      " bufno exists AND isn't modified AND isn't in the list of buffers open
      " in windows and tabs
      silent exec 'bwipeout!' i
      let nWipeouts = nWipeouts + 1
    endif
  endfor
  echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! Bdi :call DeleteInactiveBufs()

" }}}
" ============================================================================
" Autocmd {{{
" ============================================================================

" Fix autoindent in yaml
autocmd FileType yaml setl indentkeys-=<:>

" K to lookup current word in cppman
command! -nargs=+ Cppman silent! call system("tmux split-window cppman " . expand(<q-args>))
"autocmd FileType cpp set keywordprg="tmux split-window cppman"
autocmd FileType cpp nnoremap <silent><buffer> K <Esc>:Cppman <cword><CR>

" If doing a diff. Upon writing changes to file, automatically update the
" differences
autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" From Junegunn Choi's dotfiles
function! s:helptab()
  if &buftype == 'help'
    "wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction

augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt call s:helptab()
augroup END

" Don't show tabs/trailing whitespaces in man pages
autocmd FileType man set nolist

" Use :help with K
autocmd FileType vim set keywordprg=:bel\ help\ \|\ bot\ resize\ 20

" Enable spellchecking for latex or text
autocmd FileType text,tex set spell

" q closes location/quickfix/qfreplace list
autocmd FileType qf nnoremap <buffer> q :q<cr>
autocmd FileType qfreplace nnoremap <buffer> q :bd<cr>

" Move quickfix window to bottom
autocmd FileType qf wincmd J

" neovim terminal support: enter insert mode by default, remap for escape
autocmd BufWinEnter,WinEnter term://* startinsert
autocmd BufLeave term://* stopinsert
tnoremap <esc><esc> <C-\><C-n>

" Fix Python/CMake comments style for UltiSnips
autocmd FileType python set comments=b:#
autocmd FileType cmake set comments=b:#
" }}}
" ============================================================================
" Mappings {{{

" Leader
let mapleader = ','
let maplocalleader = ';'
nmap <Space> ,
vmap <Space> ,

" Navigation
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

" Navigation for tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabprev<CR>
nnoremap tk  :tabnext<CR>
nnoremap tl  :tablast<CR>
nnoremap tm  :tabm<Space>
nnoremap tn  :tabnew<CR>
nnoremap td  :tabclose<CR>
nnoremap tt  :tabnext<CR>

" Copy to system clipboard
"vnoremap  <leader>y  "+y
"nnoremap  <leader>Y  "+yg_
"nnoremap  <leader>y  "+y
"nnoremap  <leader>yy  "+yy

" Paste from system clipboard
"nnoremap <leader>p "+p
"nnoremap <leader>P "+P
"vnoremap <leader>p "+p
"vnoremap <leader>P "+P

" Paste without overwriting the register
xnoremap <silent> <expr> p <sid>Repl()
xnoremap <silent> <expr> <S-Insert> <sid>Repl()
snoremap <silent> <expr> <S-Insert> <sid>ReplSelect()

" This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" qq to record, Q to replay (plus disable Ex mode)
nmap Q @q

" Grep-like search
nnoremap <Leader>/  :Ag 
vnoremap <Leader>/  y:Agr <C-R>=escape(@", '\\.*$^[]')<CR><CR>
" TODO: specify directory to look into
"nnoremap <Leader>// :Agr

" Start the find and replace command from the cursor position to the end of
" the file
vmap <leader>z <Esc>:,$s/<c-r>=GetVisual()<cr>/
" Start the find and replace command across the whole file
vmap <leader>zz <Esc>:%s/<c-r>=GetVisual()<cr>/

" Enable 'very magic' mode
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap \>s/ \>smagic/

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Force saving files that require root permission with w!!
cmap w!! w !sudo tee % >/dev/null

" Easier formatting
nnoremap <silent> <leader>q gwip
vnoremap <silent> <leader>q gw

" Select pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Helpers for fugitive
nnoremap <Leader>gD :call MyCloseDiff()<cr>
nnoremap <Leader>gd :Gdiff<cr>

" Easy zooming
nnoremap <silent> <Leader><Leader> :ZoomToggle<CR>
" }}}
" ============================================================================
" Plugins {{{
" ============================================================================
  " DoxygenToolkit.vim {{{
  if isdirectory(s:plugin_dir . "DoxygenToolkit.vim")
    " Use C++ here for /// doxygen doc, else /** */ is used.
    let g:DoxygenToolkit_commentType = "C++"
    " Leading character used for @brief, @param...
    let g:DoxygenToolkit_versionString = "\\"
    " Comment block with ,d
    nmap <Leader>d :Dox<Enter>

    let g:DoxygenToolkit_briefTag_pre="\\brief "
    let g:DoxygenToolkit_paramTag_pre="\\param "
    let g:DoxygenToolkit_templateParamTag_pre="\\tparam "
    let g:DoxygenToolkit_throwTag_pre="\\throw "
    let g:DoxygenToolkit_returnTag="\\return "
    let g:DoxygenToolkit_blockHeader=""
    let g:DoxygenToolkit_blockFooter=""
    let g:DoxygenToolkit_authorName=$FULLNAME
  endif
  " }}}
  " fzf.vim {{{
  if isdirectory(s:plugin_dir . "fzf.vim")
    " Disable statusline overwriting
    let g:fzf_nvim_statusline = 0

    let g:fzf_action = {
          \ 'ctrl-s': 'split',
          \ 'ctrl-v': 'vsplit',
          \ }

    " Default fzf layout
    let g:fzf_layout = { 'down': '30%' }

    fun! s:fzf_root()
      let path = finddir(".git", expand("%:p:h").";")
      return expand(fnamemodify(substitute(path, ".git", "", ""), ":p:h"))
    endfun

    " Ctrl-P without fuzzy search
    nnoremap <c-p> :FZF -e --cycle<cr>

    " List colorschemes
    autocmd VimEnter * command! Colors
      \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'})

    function! s:ag_to_qf(line)
      let parts = split(a:line, ':')
      return {'filename': parts[0], 'lnum': parts[1], 'col': parts[2],
            \ 'text': join(parts[3:], ':')}
    endfunction

    function! s:w(bang)
      return a:bang ? {} : copy(get(g:, 'fzf_layout', g:fzf#vim#default_layout))
    endfunction

    function! s:expect()
      return ' --expect='.join(keys(get(g:, 'fzf_action', g:fzf_action)), ',')
    endfunction

    function! s:escape(path)
      return escape(a:path, ' %#''"\')
    endfunction

    function! s:fzf_ag_handler(lines)
      echomsg "ag_handler"
      if len(a:lines) < 2
        return
      endif

      let cmd = get(get(g:, 'fzf_action', g:fzf_action), a:lines[0], 'e')
      let list = map(a:lines[1:], 's:ag_to_qf(v:val)')

      let first = list[0]
      execute cmd s:escape(first.filename)
      execute first.lnum
      execute 'normal!' first.col.'|zz'

      if len(list) > 1
        call setqflist(list)
        wincmd p
        Qfreplace
      endif
    endfunction

    function! s:fzf_ag(query, ...)
      let opts={
            \ 'source':  printf('ag --nogroup --column --color "%s"',
            \                   escape(empty(a:query) ? '^(?=.)' : a:query, '"\')),
            \ 'sink*':    function('s:fzf_ag_handler'),
            \ 'options': '--ansi --delimiter : --nth 4.. --prompt "Ag> " '.
            \            '--multi --bind "ctrl-a:select-all,ctrl-d:deselect-all,tab:toggle-up,shift-tab:toggle-down" '.
            \            '--cycle --color hl:68,hl+:110'.s:expect()}
      let extra  = copy(get(a:000, 0, {}))
      let merged = extend(copy(opts), extra)
      call fzf#run(merged)
    endfunction

    " Ag + qfreplace
    command! -bang -nargs=* Agr call <sid>fzf_ag(<q-args>, s:w(<bang>0))

    function! s:ansi(str, col, bold)
      return printf("\x1b[%s%sm%s\x1b[m", a:col, a:bold ? ';1' : '', a:str)
    endfunction

    for [s:c, s:a] in items({'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cyan': 36})
      execute "function! s:".s:c."(str, ...)\n"
            \ "  return s:ansi(a:str, ".s:a.", get(a:, 1, 0))\n"
            \ "endfunction"
    endfor

    function! s:buflisted()
      return filter(range(1, bufnr('$')), 'buflisted(v:val)')
    endfunction

    function! s:strip(str)
      return substitute(a:str, '^\s*\|\s*$', '', 'g')
    endfunction

    function! s:bufopen(lines)
      if len(a:lines) < 2
        return
      endif
      let cmd = get(get(g:, 'fzf_action', g:fzf_action), a:lines[0], '')
      if !empty(cmd)
        execute 'silent' cmd
      endif
      execute 'buffer' matchstr(a:lines[1], '\[\zs[0-9]*\ze\]')
    endfunction

    function! s:format_buffer(b)
      let name = bufname(a:b)
      let name = empty(name) ? '[No Name]' : name
      let flag = a:b == bufnr('')  ? s:blue('★') : ' '
            "\ (a:b == bufnr('#') ? s:magenta('#') : ' ')
      let modified = getbufvar(a:b, '&modified') ? s:red(' [+]') : ''
      let readonly = getbufvar(a:b, '&modifiable') ? '' : s:green(' [RO]')
      let extra = join(filter([modified, readonly], '!empty(v:val)'), '')
      return s:strip(printf("[%s] %s\t%s\t%s", s:yellow(a:b), flag, name, extra))
      "return printf("%s  %s\t%s", flag, name, extra)
    endfunction

    function! s:fzf_buffers(...)
      let bufs = map(s:buflisted(), 's:format_buffer(v:val)')
      let socket=$NVIM_LISTEN_ADDRESS
      let opts={
            \ 'source':  reverse(bufs),
            \ 'sink*':   function('s:bufopen'),
            \ 'options': '+m -x --tiebreak=index --ansi -d "\t" -n 2,1..2 --bind "'.
            \            'ctrl-x:execute(~/.dotfiles/editor/nvim_utils.py -s '. socket .' -q close_buffer {})'.
            \            '" --prompt="Buffers > "' . s:expect(),
            \ }
      let extra  = copy(get(a:000, 0, {}))
      let merged = extend(copy(opts), extra)
      call fzf#run(merged)
    endfunction

    " Ag + qfreplace
    command! -bang -nargs=* Buf call <sid>fzf_buffers(s:w(<bang>0))
    nnoremap <c-@> :Buf<cr>
  endif
  " }}}
  " gitv {{{
    if isdirectory(s:plugin_dir . "gitv")
      nmap <leader>gv :Gitv --all<cr>
      nmap <leader>gV :Gitv! --all<cr>
      vmap <leader>gV :Gitv! --all<cr>
    endif
  " }}}
  " lightline.vim {{{
    if isdirectory(s:plugin_dir . "lightline.vim")
      function! LightlineMode()
        let fname = expand('%:t')
        return fname == '__Tagbar__' ? 'Tagbar' :
              \ fname == 'ControlP' ? 'CtrlP':
              \ fname == '__Gundo__' ? 'Gundo' :
              \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
              \ fname =~ 'NERD_tree' ? 'NERDTree' :
              \ &ft == 'unite' ? 'Unite' :
              \ &ft == 'vimfiler' ? 'VimFiler' :
              \ &ft == 'vimshell' ? 'VimShell' :
              \ bufname("%") =~ "^fugitive:" ? 'Fugitive' :
              \ winwidth('.') > 60 ? lightline#mode() : ''
      endfunction

      function! LightlineReadonly()
        if &filetype == "help"
          return ""
        elseif &readonly
          return ""
        else
          return ""
        endif
      endfunction

      function! LightlineModified()
        if &filetype == "help"
          return ""
        elseif &modified
          return "+"
        elseif &modifiable
          return ""
        else
          return ""
        endif
      endfunction

      function! LightlineFilename()
        let ll_ro = LightlineReadonly()
        let ll_mo = LightlineModified()
        let ll_na = expand('%:t')
        return ('' != ll_ro ? ll_ro . ' ' : '') .
              \ ('' != ll_na ? ll_na : '[No Name]') .
              \ ('' != ll_mo ? ' ' . ll_mo : '')
      endfunction

      function! LightlineFileEncoding()
        return (&fenc != "utf-8") ?
              \ (strlen(&fenc) ? &fenc : (&enc != "utf-8" ? &enc : '' )) : ''
      endfunction

      function! LightlineFileFormat()
        return (&ff != "unix") ? &ff : ''
      endfunction

      let g:lightline = {
            \ 'colorscheme': 'murmur',
            \ 'enable': {
            \   'tabline': 1,
            \   'statusline': 1,
            \ },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['tagbar'] ],
            \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'component': {
            \   'fugitive': '%{exists("*fugitive#head")? " ".fugitive#head():""}',
            \   'tagbar':   '%{exists("*tagbar#currenttag")?tagbar#currenttag("[%s]", "", "f"):""}'
            \ },
            \ 'component_visible_condition': {
            \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
            \ },
            \ 'component_function': {
            \   'mode':     'LightlineMode',
            \   'readonly': 'LightlineReadonly',
            \   'modified': 'LightlineModified',
            \   'filename': 'LightlineFilename',
            \   'fileencoding': 'LightlineFileEncoding',
            \   'fileformat': 'LightlineFileFormat'
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }

      let g:lightline.tabline = {
            \ 'left': [ [ 'tabs' ] ],
            \ 'right': [ [ 'close' ] ] }
    endif
  " }}}
  " neomake {{{
    if isdirectory(s:plugin_dir . "neomake") || isdirectory(s:plugin_dir . "vim-dispatch")
      let g:neomake_error_sign = {
            \ 'text': '>>',
            \ 'texthl': 'ErrorMsg',
            \ }
      let g:neomake_warning_sign = {
            \ 'text': '>>',
            \ 'texthl': 'WarningMsg',
            \ }

      let g:neomake_open_list = 1

      " Add clang-tidy support
      let g:neomake_c_clangtidy_args_conf = ['-p', '_build']

      " Run make
      nmap <Leader>b :Neomake!<CR>
    endif
  " }}}
  " neoterm {{{
    if isdirectory(s:plugin_dir . "neoterm")
      let g:neoterm_size = 15
      let g:neoterm_position = "horizontal"
      let g:neoterm_keep_term_open = 1

      function! s:RunIPython()
        if g:neoterm.has_any()
          silent! T %reset -f
        else
          silent! T ipython -i --no-banner --no-confirm-exit --quick --quiet --pdb
        endif
        let cmd = '%run '.expand('%')
        silent! call neoterm#do(cmd)
      endfunction
      command! RunIPython call s:RunIPython()
      autocmd FileType python nnoremap <Leader>r :RunIPython<cr>
    endif
  " }}}
  " startify {{{
    if isdirectory(s:plugin_dir . "vim-startify")
      " Helper function to center header
      function! s:center_header(lines) abort
        let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
        let centered_lines = map(copy(a:lines),
              \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
        return centered_lines
      endfunction

      " Call fortune and cowsay (if present), and center the output
      let g:startify_custom_header =
        \ s:center_header(map(split(system('cowsay -f "$(ls /usr/share/cows/ | grep -vE "head|sod|kiss|surg|tele" | sort -R | head -1)" "$(fortune -s)"'), '\n'), '" ". v:val') + ['',''])

      " Skip list
      let g:startify_skiplist = [
        \ '^/tmp'
        \ ]

      " Number of files
      let g:startify_files_number = 5

      let g:startify_list_order = [['-- Bookmarks --'], 'bookmarks', ['-- Sessions --'], 'sessions', ['-- Recent files --'], 'files']
      let g:startify_bookmarks = [ s:nvim_dir . 'init.vim', s:nvim_dir . 'plugins.vim' ]

      let g:startify_session_dir = s:nvim_dir . 'sessions'
    endif
  " }}}
  " supertab {{{
    if isdirectory(s:plugin_dir . "supertab")
      let g:SuperTabDefaultCompletionType = '<Tab>'
      let g:SuperTabBackward = '<C-S-Tab>'
      let g:SuperTabCrMapping = 1
    endif
  " }}}
  " ultisnips {{{
    if isdirectory(s:plugin_dir . "ultisnips")
      " Trigger configuration.
      let g:UltiSnipsExpandTrigger="<tab>"
      let g:UltiSnipsJumpForwardTrigger="<tab>"
      let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
      let g:UltiSnipsListSnippets="<c-tab>"

      " If you want :UltiSnipsEdit to split your window.
      let g:UltiSnipsEditSplit="vertical"

      " Custom snippets
      let g:UltiSnipsSnippetsDir = s:nvim_dir . 'custom_snippets'
      let g:UltiSnipsSnippetDirectories=["UltiSnips", "custom_snippets"]

      " Prevent UltiSnips from stealing ctrl-k.
      augroup VimStartup
        autocmd!
        autocmd VimEnter * sil! iunmap <c-k>
      augroup end
    endif
  " }}}
  " vim-clang-format {{{
    if isdirectory(s:plugin_dir . "vim-clang-format")
      " map to <Leader>cf in C++ code
      autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
      autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
    endif
  " }}}
  " vim-commentary {{{
    if isdirectory(s:plugin_dir . "vim-commentary") || isdirectory(s:plugin_dir . "tcomment_vim")
      " For transition from nerdcommenter
      nmap <Leader>c<Space> gcc
      nmap <Leader>cc       gc
      vmap <Leader>c<Space> gcc
      vmap <Leader>cc       gc
    endif
  " }}}
  " vim-easy-align {{{
    if isdirectory(s:plugin_dir . "vim-easy-align")
      " Start interactive EasyAlign in visual mode
      vmap <Enter> <Plug>(EasyAlign)

      " Start interactive EasyAlign with a Vim movement
      nmap <Leader>a <Plug>(EasyAlign)

      let g:easy_align_delimiters = {
      \ ' ': { 'pattern': ' ', 'left_margin': 0, 'right_margin': 0, 'stick_to_left': 0 },
      \ '+': { 'pattern': '+', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ '-': { 'pattern': '-', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ '=': { 'pattern': '===\|<=>\|\(&&\|||\|<<\|>>\)=\|=\~[#?]\?\|=>\|[:+/*!%^=><&|.-]\?=[#?]\?',
      \ 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ ':': { 'pattern': ':', 'left_margin': 0, 'right_margin': 1, 'stick_to_left': 1 },
      \ ',': { 'pattern': ',', 'left_margin': 0, 'right_margin': 1, 'stick_to_left': 1 },
      \ '|': { 'pattern': '|', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ '.': { 'pattern': '\.', 'left_margin': 0, 'right_margin': 0, 'stick_to_left': 0 },
      \ '&': { 'pattern': '\\\@<!&\|\\\\', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ '{': { 'pattern': '(\@<!{', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ '}': { 'pattern': '}', 'left_margin': 1, 'right_margin': 0, 'stick_to_left': 0 },
      \ '\': { 'pattern': '\\', 'left_margin': 1, 'right_margin': 0, 'stick_to_left': 0 },
      \ '<': { 'pattern': '<', 'left_margin': 1, 'right_margin': 0, 'stick_to_left': 0 },
      \ 'd': { 'pattern': ' \(\S\+\s*[;=]\)\@=', 'left_margin': 0, 'right_margin': 0},
      \ '#': { 'pattern': '#', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ '[': { 'pattern': '(\@<![', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
      \ ']': { 'pattern': ']', 'left_margin': 1, 'right_margin': 0, 'stick_to_left': 0 },
      \ }
    endif
  " }}}
  " vim-fswitch {{{
  if isdirectory(s:plugin_dir . "vim-fswitch")
    let g:fsnonewfiles = 'on'

    augroup mycppfiles
      au!
      au BufEnter *.h,*.hh let b:fswitchdst  = 'hpp,hxx,cpp,cc'
      au BufEnter *.hpp,*.hxx let b:fswitchdst  = 'cpp,cc,h,hh'
      au BufEnter *.cpp,*.cc let b:fswitchdst  = 'h,hh,hpp,hxx'
    augroup END

    nnoremap <silent> <M-Tab> :silent! FSHere<CR>
  endif
  " }}}
  " vim-multiple-cursors {{{
  if isdirectory(s:plugin_dir . "vim-multiple-cursors")
    " Called once right before you start selecting multiple cursors
    function! Multiple_cursors_before()
      if exists("g:loaded_youcompleteme")
        let s:old_ycm_whitelist = g:ycm_filetype_whitelist
        let g:ycm_filetype_whitelist = {}
      endif
      " See: https://github.com/terryma/vim-multiple-cursors/pull/185
      if isdirectory(s:plugin_dir . "targets.vim")
        xnoremap <buffer> i i
        onoremap <buffer> i( i(
      endif
    endfunction

    " Called once only when the multiple selection is canceled (default <Esc>)
    function! Multiple_cursors_after()
      if exists("s:old_ycm_whitelist")
        let g:ycm_filetype_whitelist = s:old_ycm_whitelist
      endif
      " See: https://github.com/terryma/vim-multiple-cursors/pull/185
      if isdirectory(s:plugin_dir . "targets.vim")
        xunmap <buffer> i
        ounmap <buffer> i(
      endif
    endfunction

    " Press Escape and go back to Normal mode
    let g:multi_cursor_exit_from_visual_mode = 0
    let g:multi_cursor_exit_from_insert_mode = 0
    let g:multi_cursor_quit_key = ''
  endif
  " }}}
  " vim-notes {{{
    if isdirectory(s:plugin_dir . "vim-notes")
      let g:notes_directories=["~/.local/share/nvim/notes"]
      autocmd BufNewFile,BufRead *.note set filetype=notes
    endif
  " }}}
  " vim-online-thesaurus {{{
    if isdirectory(s:plugin_dir . "vim-online-thesaurus")
      let g:online_thesaurus_map_keys = 0
      autocmd FileType text,tex nnoremap K :OnlineThesaurusCurrentWord<CR>
    endif
  " }}}
  " vim-sneak {{{
    if isdirectory(s:plugin_dir . "vim-sneak")
      " Use Sneak as a minimalist alternative to EasyMotion
      let g:sneak#streak = 1

      " Colors
      highlight SneakPluginTarget guifg=white guibg=red    ctermfg=white ctermbg=red
      highlight SneakStreakTarget guifg=white guibg=red    ctermfg=white ctermbg=red
      highlight SneakStreakMask   guifg=gray  guibg=red    ctermfg=gray  ctermbg=red
      highlight SneakPluginScope  guifg=black guibg=yellow ctermfg=black ctermbg=yellow

      "replace 'f' with 1-char Sneak
      nmap f <Plug>Sneak_f
      nmap F <Plug>Sneak_F
      xmap f <Plug>Sneak_f
      xmap F <Plug>Sneak_F
      omap f <Plug>Sneak_f
      omap F <Plug>Sneak_F

      "replace 't' with 1-char Sneak
      nmap t <Plug>Sneak_t
      nmap T <Plug>Sneak_T
      xmap t <Plug>Sneak_t
      xmap T <Plug>Sneak_T
      omap t <Plug>Sneak_t
      omap T <Plug>Sneak_T
    endif
  " }}}
  " vimtex {{{
    if isdirectory(s:plugin_dir . "vimtex")
      let g:vimtex_latexmk_build_dir = './build'
      " If using qpdfview
      let g:vimtex_view_general_viewer = 'qpdfview'
      let g:vimtex_view_general_options = '--unique @pdf\#src:@tex:@line:@col'
      let g:vimtex_view_general_options_latexmk = '--unique'
      let g:ycm_collect_identifiers_from_tags_files = 0

      " Remap double click for latex
      autocmd FileType tex nnoremap <silent> <2-LeftMouse> :VimtexView<CR>
    endif
  " }}}
  " YouCompleteMe {{{
    if isdirectory(s:plugin_dir . "YouCompleteMe")
      let g:ycm_key_list_select_completion = ['<Down>']
      " let g:ycm_key_invoke_completion = '<S-Space>'
      let g:ycm_key_invoke_completion = '<C-y>'
      let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
      let g:ycm_show_diagnostics_ui = 0
      let g:ycm_filepath_completion_use_working_dir = 1
    endif
  " }}}
" }}}
" ============================================================================
