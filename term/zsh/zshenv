# -*- shell-script -*-
#
# This file is sourced on all invocations of the shell.
# If the -f flag is present or if the NO_RCS option is
# set within this file, all other initialization files
# are skipped.
#
# This file should contain commands to set the command
# search path, plus other important environment variables.
# This file should not contain commands that produce
# output or assume the shell is attached to a tty.
#
# Global Order: zshenv, zprofile, zshrc, zlogin

export PAGER='less -R'
export REPLYTO=$EMAIL
export MAIL=$HOME/Mail

# Tools
export EDITOR='vim'
export VISUAL='vim'
export MAIL="/var/mail/$USER"

# Find the first available terminal
term_arr=("alacritty" "termite" "urxvt" "terminator" "gnome-terminal" "xterm")
for t in "${term_arr[@]}"
do
  if command -v $t >/dev/null; then
    # This is used by i3-sensible-terminal
    export TERMINAL=$t
    break
  fi
done

# Terminal (vim + tmux)
export TERM=xterm-256color
if [ "$TMUX" != "" ]; then
  # Fix term type
  export TERM=screen-256color

  # Disable Ctrl-S
  [[ $- == *i* ]] && stty -ixon
fi

# Force unicode in tmux
alias tmux="tmux -u"

# MPD port
export MPD_PORT=49000


apt_pref='apt-get'

# Useful aliases
alias m="make -j8"
alias n="ninja -j8"
alias v="valgrind --tool=memcheck"
alias gitk="gitk --all"

if command -v xdg-open >/dev/null; then
  alias open="xdg-open"
fi

alias rm="rm -I"
# Useful for use with synctex
alias vimtex='vim --servername LATEX'
alias nvimtex='NVIM_LISTEN_ADDRESS=/tmp/nvimtex.sock nvim'
alias ncmpcpp="ncmpcpp -b ~/.config/ncmpcpp/bindings"

# Enable GCC coloring (GCC >= 4.9)
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Report CPU usage for commands running longer than 10 seconds
REPORTTIME=10

# 10ms for key sequences
KEYTIMEOUT=1

# The maximum number of events to save in the internal history
HISTSIZE=4000
# The maximum number of events to save in the history file
SAVEHIST=4000

# Watch people logging on the machine (except the current user)
watch=(notme)

# tmuxifier
if [[ -d  "${HOME}/.tmuxifier" ]]; then
  export PATH="$HOME/.tmuxifier/bin:$PATH"
fi

# Load XDG parameters
if [ -f  "~/.config/user-dirs.dirs" ]; then
  source ~/.config/user-dirs.dirs
fi

# If glances installed
if type "glances" > /dev/null; then
  alias glances="glances -b --process-short-name -1"
fi

export GPG_TTY=$(tty)

# Arch stuff
if [[ -f "/etc/arch-release" ]]; then
  # Update AUR package
  function update_aur {
    # If it's an AUR submodule with an HTTPS/SSH+Git URL
    pull_url=$(git config --get remote.origin.url)
    pkg_name=$(echo ${pull_url} | sed -n 's;\(https://\|ssh+git://aur@\)aur[4]*.archlinux.org\(:22\)\{0,1\}/\([-A-Za-z0-9]\+\).git;\3;p')
    if [[ ! -z ${pkg_name} ]]; then
      pkg_version=$(sed -n "s/pkgver=['\"]*\([0-9]\+.[0-9]\+.[0-9]\+\)['\"]*/\1/p" PKGBUILD)
      pkg_rel=$(sed -n "s/pkgrel=['\"]*\([0-9]\+\)['\"]*/\1/p" PKGBUILD)
      commit_msg="Update to version ${pkg_version} (pkgrel ${pkg_rel})"

      mksrcinfo \
        && git add -p . \
        && makepkg -if --noconfirm \
        && git cm "${commit_msg}" \
        && $(git branch -f master || true) \
        && { git push origin master:master; echo $fg[green] "Successfully pushed ${pkg_name} to the AUR" $reset_color; } &
    else
      >&2 echo "Error: this is not a valid AUR submodule"
    fi
  }
fi

# Use local .zshenv
if [ -f ~/.zshenv.local ]; then
  source ~/.zshenv.local
fi
