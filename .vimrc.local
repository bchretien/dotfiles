" Color scheme
colorscheme molokai

" Font (patched for airline)
"set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline
let g:airline_powerline_fonts = 1
let g:airline_theme="murmur"

" No spell checking
set nospell

set number
set linebreak
set wrap

" Ignored packages
UnBundle 'PIV'
UnBundle 'clang_complete'

set clipboard+=unnamed

" Enable/disable GUI features
set guioptions+=a " autoselect
set guioptions+=c " console dialogs
set guioptions-=m " menu bar
set guioptions-=T " toolbar
set guioptions-=l " left-hand scrollbar
set guioptions-=L
set guioptions-=r " right-hand scrollbar
set guioptions-=R
set guioptions-=b " bottom scrollbar

set modeline
set switchbuf=usetab

" Searching starts after you enter the string
set incsearch

" Turns on search highlighting
set hlsearch

" Remove indent guides
let g:indent_guides_enable_on_vim_startup = 0

" Set hidden character list that can de display with set list
set listchars=tab:>-,trail:~,extends:>,precedes:<

"====[ Automatically reload .vimrc when updated ]====
" See: http://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

"====[ Add CUDA support ]====
au BufNewFile,BufRead *.cu,*.cuh set ft=cu

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Damian Conway's OSCON 2013 tricks
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"====[ Make the 81st column stand out ]====
set colorcolumn=
highlight ColorColumn ctermbg=blue
call matchadd('ColorColumn', '\%81v', 100)


"====[ Highlight the match in red ]====
" This rewires n and N to do the highlighing
nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>

function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=white ctermbg=red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction


"====[ Make CTRL-K list diagraphs before each digraph entry ]====
"inoremap <expr>  <C-K>   HUDG_GetDigraph()
"inoremap <expr>  <C-K>   BDG_GetDigraph()
"inoremap <expr>  <C-Z>   HUDG_GetDigraph()

"====[ Move/duplicate blocks of code ]====
vmap  <expr>  D        DVB_Duplicate()
vmap  <expr>  h        DVB_Drag('left')
vmap  <expr>  l        DVB_Drag('right')
vmap  <expr>  j        DVB_Drag('down')
vmap  <expr>  k        DVB_Drag('up')

" Remove any introduced trailing whitespace after moving...
let g:DVB_TrimWS = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Miscellaneous development
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ctags support
" Note: with Git hooks available in these dotfiles, using "git ctags" will
" generate tags in .git/tags
set tags+=~/.vim/tags;.git/tags;$HOME

" Doxygen syntax highlighting
let g:load_doxygen_syntax=1

" Default number of spaces for indent
set shiftwidth=2

" N-s: do not indent C++ namespaces
" g0:  do not indent public,private...
set cino=N0,g0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" DoxygenToolkit.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use C++ here for /// doxygen doc, else /** */ is used.
let g:DoxygenToolkit_commentType = "C++"
" Leading character used for @brief, @param...
let g:DoxygenToolkit_versionString = "\\"
" Comment block with ,d
nmap <Leader>d :Dox<Enter>

let g:DoxygenToolkit_briefTag_pre="\\brief "
let g:DoxygenToolkit_paramTag_pre="\\param "
let g:DoxygenToolkit_returnTag="\\return "
let g:DoxygenToolkit_blockHeader=""
let g:DoxygenToolkit_blockFooter=""
let g:DoxygenToolkit_authorName=$FULLNAME
"let g:DoxygenToolkit_licenseTag=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" cmake.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:cmake_cxx_compiler = 'g++'
let g:cmake_c_compiler = 'gcc'
let g:cmake_build_dirs = [ "build" ]
let g:cmake_build_type = "RelWithDebInfo"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" EasyAlign
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign with a Vim movement
nmap <Leader>a <Plug>(EasyAlign)


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight link SyntasticError ErrMsg
highlight link SyntasticWarning airline_warning
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" UltiSnips
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trigger configuration.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Vim-CtrlSpace
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_exclude_preview = 1
let g:ctrlspace_use_tabline = 0
let g:ctrlspace_use_mouse_and_arrows = 1
hi CtrlSpaceSelected term=reverse ctermfg=187 ctermbg=23 cterm=bold
hi CtrlSpaceNormal term=NONE ctermfg=244 ctermbg=232 cterm=NONE
hi CtrlSpaceFound ctermfg=220 ctermbg=NONE cterm=bold

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" vim-multiple-cursors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Redefine mapping
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_key='<C-n>'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" YankStack
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set <M-p>=^[p
set <M-P>=^[P

" fix meta-keys which generate <Esc>a .. <Esc>z
let c='a'
while c <= 'z'
  exec "set <M-".toupper(c).">=\e".c
  exec "imap \e".c." <M-".toupper(c).">"
  let c = nr2char(1+char2nr(c))
endw

" Work around the ambiguity with escape sequences
set ttimeout ttimeoutlen=50

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" YouCompleteMe
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Change the default key-binding of YCM to <C-TAB> and <C-S-TAB>
" to make it compatible with UltiSnips
let g:ycm_key_list_select_completion=['<C-TAB>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-S-TAB>', '<Up>']

" See: http://0x3f.org/blog/make-youcompleteme-ultisnips-compatible/
" Set the default action of SuperTab to triggering <C-TAB>
"let g:SuperTabDefaultCompletionType = '<C-Tab>'
let g:SuperTabBackward = '<C-S-Tab>'

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
