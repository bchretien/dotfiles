" Color scheme
colorscheme molokai

" No spell checking
set nospell

set number
set linebreak
set wrap

" Ignored packages
UnBundle 'PIV'
UnBundle 'clang_complete'
UnBundle 'Valloric/YouCompleteMe'
UnBundle 'vim-powerline'

set clipboard+=unnamed
set guioptions+=a

set modeline
set switchbuf=usetab

" Remove indent guides
let g:indent_guides_enable_on_vim_startup = 0

" Set hidden character list that can de display with set list
set listchars=tab:>-,trail:~,extends:>,precedes:<

"====[ Automatically reload .vimrc when updated ]====
" See: http://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Damian Conway's OSCON 2013 tricks
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"====[ Make the 81st column stand out ]====
set colorcolumn=
highlight ColorColumn ctermbg=blue
call matchadd('ColorColumn', '\%81v', 100)


"====[ Highlight the match in red ]====
" This rewires n and N to do the highlighing
nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>

function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=white ctermbg=red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction


"====[ Make CTRL-K list diagraphs before each digraph entry ]====
"inoremap <expr>  <C-K>   HUDG_GetDigraph()
"inoremap <expr>  <C-K>   BDG_GetDigraph()
"inoremap <expr>  <C-Z>   HUDG_GetDigraph()

"====[ Move/duplicate blocks of code ]====
vmap  <expr>  D        DVB_Duplicate()
vmap  <expr>  h        DVB_Drag('left')
vmap  <expr>  l        DVB_Drag('right')
vmap  <expr>  j        DVB_Drag('down')
vmap  <expr>  k        DVB_Drag('up')

" Remove any introduced trailing whitespace after moving...
let g:DVB_TrimWS = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Miscellaneous development
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ctags support
set tags+=tags;$HOME

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" EasyAlign
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign with a Vim movement
nmap <Leader>a <Plug>(EasyAlign)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Vim-CtrlSpace
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_exclude_preview = 1
let g:ctrlspace_use_tabline = 0
let g:ctrlspace_use_mouse_and_arrows = 1
hi CtrlSpaceSelected term=reverse ctermfg=187 ctermbg=23 cterm=bold
hi CtrlSpaceNormal term=NONE ctermfg=244 ctermbg=232 cterm=NONE
hi CtrlSpaceFound ctermfg=220 ctermbg=NONE cterm=bold


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" YankStack
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set <m-p>=^[p
set <m-P>=^[P

" fix meta-keys which generate <Esc>a .. <Esc>z
let c='a'
while c <= 'z'
  exec "set <M-".toupper(c).">=\e".c
  exec "imap \e".c." <M-".toupper(c).">"
  let c = nr2char(1+char2nr(c))
endw
