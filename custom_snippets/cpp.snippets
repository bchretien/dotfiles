# namespace
snippet ns "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} // end of `!p
if not t[1]:
  snip.rv = "unnamed namespace"
else:
  snip.rv = "namespace %s" % t[1]
`
endsnippet

# include guard
snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import string, subprocess
	is_git_repo = subprocess.call(['git', 'rev-parse', '--is-inside-work-tree'], stderr=subprocess.PIPE) == 0
	if is_git_repo:
		git_root_path = subprocess.check_output(['git', 'rev-parse', '--show-toplevel'])[:-1]
		if path:
			rel_path = os.path.relpath(path or "", git_root_path)
			rel_path = re.sub(r'include/', '', '%s' % rel_path)
		else:
			rel_path = "name"
	else:
		rel_path = fn or "name"
	path_name = re.sub(r'[^A-Za-z0-9]+', '_', '%s' % rel_path).upper()
	snip.rv = ('%s' % (path_name)).upper()
else:
	snip.rv = snip.c`}
# define $1

${VISUAL}${0}

#endif //! $1
endsnippet

# template
snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
$0
endsnippet
